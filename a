local Api = {};

-- [define as upvalues for 0.00001% speed increase]
--functions
local sub = string.sub;
local find = string.find;
local split = string.split;
local remove = table.remove;
local gsub = string.gsub;
local insert = table.insert;
local match = string.match;
local tonumber = tonumber;

local pcall = pcall;
local error = error;
local tostring = tostring;

local assert = assert;

-- local httpget : (string) -> (none,string);do -- v3 has actual luau, v2 doesn't
local httpget; do
    local game = game;
    local oldhttpget = game.HttpGet;
    httpget = function(url)
        local suc, res = pcall(oldhttpget, game, url); -- game:HttpGet(url)
        if not suc then
            return error("Failed to send get request: " .. tostring(res));
        end;
        return res;
    end;
end;

-- Patterns
local pattern1 = '<body class="docs%-gm">'
local splitseperator = '<tr style="height: 20px">'
local namepattern = 'dir="ltr">([^<]+)</td>'
local valuepattern = 'Value: ([^<]+)'
local demandpattern = 'Demand: ([^<]+)'
local raritypattern = 'Rarity: ([^<]+)'
local clickme = "CLICK ME"
local na = "N/A"
local newgt = "NEW &gt;"
local spaces = "(%s+)"
local singlequote_escape = "&#39;"
local singlequote = "'"
local space = " "
local spaces2 = "%s"
local emptystring = ""
local letters = "%a"
local T1Exotics = "T1 Exotic[s]?"
local not_numbers = "%D"

local URL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vQ5TmCAgEmeWIApvmDUB1ofYLcKXaUWC87W-mHrr3KCvDeQuUeyD1hy-tJbWmzRMHB0LzqgC-zRppqB/pubhtml#"

function Api.refresh(self)
    assert(self == Api, "Use colon notation. Try self:refresh()");

    local Body = httpget(URL);
    Body = sub(Body, find(Body, pattern1), -1);

    local split = split(Body, splitseperator);
    remove(split, 1);

    local Values = {};
    for _, v in next, split do
        if (find(v, clickme) or find(v, na)) and find(v, namepattern) then
            local ltrs = {};
            gsub(v, namepattern, function(a)
                insert(ltrs, a);
            end);
            if #ltrs < 2 then
                continue;
            end;
            local first = ltrs[1];
            if first == newgt then
                continue;
            end;
            first = (gsub(first, spaces, space));
            first = (gsub(first, singlequote_escape, singlequote));
            if match(sub(first, -1, -1), spaces2) then
                first = sub(first, 1, -2);
            end;

            local value = tonumber((gsub(ltrs[2], not_numbers, emptystring)));
            Values[first] = value;
        end;
    end;

    self.Values = Values;
    return Values;
end;

function Api.calculate(self, items)
    assert(self == Api, "Use colon notation. Try self:calculate(items)");
    assert(type(items) == "table", "Expected 'table' for items, got " .. type(items) .. ". Pass through a table with itemname = amount. Ex: {Spider = 1} for having one Spider.");

    local Value = 0;

    for Item, Amount in next, items do
        if type(Item) ~= "string" then
            return error("Unexpected key in items. Expected 'string', got " .. format("%q", Item) .. " (" .. type(Item) .. ")");
        end;
        if type(Amount) ~= "number" then
            return error("Unexpected value in items. Expected 'number', got " .. format("%q", Amount) .. " (" .. type(Amount) .. ")");
        end;
        Amount = clamp(Amount, 0, abs(Amount)) -- keep Amount above 0
        Item = upper(Item);

        local value = self.Values[Item];
        if value then
            Value += (value * Amount);
        else
            warn("Item '" .. Item .. "' was not found in values.");
        end;
    end;

    return Value;
end;

function Api.format(self, number)
    assert(self == Api, "Use colon notation. Try self:format(number)");
    assert(type(number) == "number", "Expected 'number' for number, got " .. type(number));

    number = tostring(number);
    if #number < 4 then return number; end;

    local formatted = (number:reverse():gsub("%d%d%d", "%0,")):reverse();
    if sub(formatted, 1, 1) == "," then
        formatted = sub(formatted, 2, -1);
    end;

    return formatted;
end;

Api:refresh();
shared.UniversalValueApi = Api;
return Api;
